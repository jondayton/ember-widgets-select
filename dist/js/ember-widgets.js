/*!
* ember-widgets v0.2.0
* Copyright 2013-2015 Addepar Inc.
* See LICENSE.
*/
eval("(function() {\n\nvar _ref;\n\nEmber.Widgets = Ember.Namespace.create();\n\nEmber.Widgets.VERSION = '0.2.0';\n\nEmber.Widgets.DISABLE_ANIMATIONS = false;\n\nif ((_ref = Ember.libraries) != null) {\n  _ref.register('Ember Widgets', Ember.Widgets.VERSION);\n}\n\n\n})();//@ sourceURL=build/src/ember_widgets.js")

eval("(function() {\n\nEmber.AddeparMixins = Ember.AddeparMixins || Ember.Namespace.create();\n\nEmber.AddeparMixins.ResizeHandlerMixin = Ember.Mixin.create({\n  resizeEndDelay: 200,\n  resizing: false,\n  onResizeStart: Ember.K,\n  onResizeEnd: Ember.K,\n  onResize: Ember.K,\n  endResize: Ember.computed(function() {\n    return function(event) {\n      if (this.isDestroyed) {\n        return;\n      }\n      this.set('resizing', false);\n      return typeof this.onResizeEnd === \"function\" ? this.onResizeEnd(event) : void 0;\n    };\n  }),\n  handleWindowResize: function(event) {\n    if (!this.get('resizing')) {\n      this.set('resizing', true);\n      if (typeof this.onResizeStart === \"function\") {\n        this.onResizeStart(event);\n      }\n    }\n    if (typeof this.onResize === \"function\") {\n      this.onResize(event);\n    }\n    return Ember.run.debounce(this, this.get('endResize'), event, this.get('resizeEndDelay'));\n  },\n  didInsertElement: function() {\n    this._super();\n    return this._setupResizeDocumentHandlers();\n  },\n  willDestroyElement: function() {\n    this._removeResizeDocumentHandlers();\n    return this._super();\n  },\n  _setupResizeDocumentHandlers: function() {\n    if (this._resizeHandler) {\n      return;\n    }\n    this._resizeHandler = jQuery.proxy(this.get('handleWindowResize'), this);\n    return jQuery(window).on(\"resize.\" + this.elementId, this._resizeHandler);\n  },\n  _removeResizeDocumentHandlers: function() {\n    jQuery(window).off(\"resize.\" + this.elementId, this._resizeHandler);\n    return this._resizeHandler = null;\n  }\n});\n\n\n})();//@ sourceURL=dependencies/ember-addepar-mixins/resize_handler.js")

eval("(function() {\n\nEmber.TEMPLATES[\"component-default-content\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1;\n\n\n  data.buffer.push(\"<p>\");\n  stack1 = helpers._triageMustache.call(depth0, \"content\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"</p>\\n\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"multi-select-item\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<div>\");\n  stack1 = helpers._triageMustache.call(depth0, \"view.label\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"</div>\\n<a class=\\\"ember-select-search-choice-close\\\" href=\\\"#\\\"\\n  \");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"removeSelectItem\", \"view.content\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data})));\n  data.buffer.push(\">Ã—\\n</a>\\n\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"multi-select\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1;\n  data.buffer.push(\"\\n    <span class=\\\"ember-select-no-results\\\">No results match \\\"\");\n  stack1 = helpers._triageMustache.call(depth0, \"query\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\\"</span>\\n  \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div class=\\\"ember-select-container ember-select-multi dropdown-toggle js-dropdown-toggle\\\">\\n  <ul \");\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\n    'class': (\":form-control :ember-select-choices choicesFieldClass\")\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push(\">\\n    \");\n  data.buffer.push(escapeExpression(helpers.each.call(depth0, \"selections\", {hash:{\n    'itemViewClass': (\"view.selectionItemView\")\n  },hashTypes:{'itemViewClass': \"STRING\"},hashContexts:{'itemViewClass': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n  data.buffer.push(\"\\n    <li class=\\\"ember-select-search-field\\\">\\n      \\n      <span class=\\\"invisible-placeholder\\\">\");\n  stack1 = helpers._triageMustache.call(depth0, \"invisiblePlaceholderText\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"</span>\\n      \");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"searchView\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\n  data.buffer.push(\"\\n    </li>\\n  </ul>\\n</div>\\n\\n<div class=\\\"dropdown-menu js-dropdown-menu\\\">\\n  \");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"listView\", {hash:{\n    'tagName': (\"ul\"),\n    'classNames': (\"ember-select-results\"),\n    'heightBinding': (\"dropdownHeight\"),\n    'rowHeightBinding': (\"rowHeight\"),\n    'contentBinding': (\"groupedContent\"),\n    'itemViewClassBinding': (\"itemView\")\n  },hashTypes:{'tagName': \"STRING\",'classNames': \"STRING\",'heightBinding': \"STRING\",'rowHeightBinding': \"STRING\",'contentBinding': \"STRING\",'itemViewClassBinding': \"STRING\"},hashContexts:{'tagName': depth0,'classNames': depth0,'heightBinding': depth0,'rowHeightBinding': depth0,'contentBinding': depth0,'itemViewClassBinding': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n  data.buffer.push(\"\\n  \");\n  stack1 = helpers['if'].call(depth0, \"hasNoResults\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n</div>\\n\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"select-item-layout\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1;\n  data.buffer.push(\"\\n  \");\n  stack1 = helpers._triageMustache.call(depth0, \"view.content.name\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\");\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = '', stack1;\n  data.buffer.push(\"\\n  \");\n  stack1 = helpers._triageMustache.call(depth0, \"yield\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\");\n  return buffer;\n  }\n\n  stack1 = helpers['if'].call(depth0, \"view.content.isGroupOption\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"select-item\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1;\n  data.buffer.push(\"\\n  <span \");\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\n    'title': (\"view.label\")\n  },hashTypes:{'title': \"ID\"},hashContexts:{'title': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push(\">\\n    \");\n  stack1 = helpers._triageMustache.call(depth0, \"view.label\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n  </span>\\n\");\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = '', stack1;\n  data.buffer.push(\"\\n  \");\n  stack1 = helpers._triageMustache.call(depth0, \"view.label\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\");\n  return buffer;\n  }\n\n  stack1 = helpers['if'].call(depth0, \"controller.titleOnOptions\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"select\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '';\n  data.buffer.push(\"\\n      \");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"selectedItemView\", {hash:{\n    'contentBinding': (\"selection\")\n  },hashTypes:{'contentBinding': \"STRING\"},hashContexts:{'contentBinding': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n  data.buffer.push(\"\\n      <i \");\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\n    'class': (\"view.dropdownToggleIcon\")\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push(\"></i>\\n    \");\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = '', stack1;\n  data.buffer.push(\"\\n      <span>\");\n  stack1 = helpers._triageMustache.call(depth0, \"prompt\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"</span>\\n      <i \");\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\n    'class': (\"view.dropdownToggleIcon\")\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push(\"></i>\\n    \");\n  return buffer;\n  }\n\nfunction program5(depth0,data) {\n  \n  var buffer = '';\n  data.buffer.push(\"\\n    <div class=\\\"ember-select-search\\\">\\n      \");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"searchView\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\n  data.buffer.push(\"\\n    </div>\\n  \");\n  return buffer;\n  }\n\nfunction program7(depth0,data) {\n  \n  var buffer = '', stack1;\n  data.buffer.push(\"\\n    \");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"listView\", {hash:{\n    'tagName': (\"ul\"),\n    'classNames': (\"ember-select-results\"),\n    'heightBinding': (\"dropdownHeight\"),\n    'rowHeightBinding': (\"rowHeight\"),\n    'contentBinding': (\"groupedContent\"),\n    'itemViewClassBinding': (\"itemView\")\n  },hashTypes:{'tagName': \"STRING\",'classNames': \"STRING\",'heightBinding': \"STRING\",'rowHeightBinding': \"STRING\",'contentBinding': \"STRING\",'itemViewClassBinding': \"STRING\"},hashContexts:{'tagName': depth0,'classNames': depth0,'heightBinding': depth0,'rowHeightBinding': depth0,'contentBinding': depth0,'itemViewClassBinding': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n  data.buffer.push(\"\\n    \");\n  stack1 = helpers['if'].call(depth0, \"isLoading\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n    \");\n  stack1 = helpers['if'].call(depth0, \"hasNoResults\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n  \");\n  return buffer;\n  }\nfunction program8(depth0,data) {\n  \n  \n  data.buffer.push(\"\\n      <span class=\\\"ember-select-loading\\\">Loading...</span>\\n    \");\n  }\n\nfunction program10(depth0,data) {\n  \n  var buffer = '', stack1;\n  data.buffer.push(\"\\n      <span class=\\\"ember-select-no-results\\\">No results match \\\"\");\n  stack1 = helpers._triageMustache.call(depth0, \"query\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\\"</span>\\n    \");\n  return buffer;\n  }\n\nfunction program12(depth0,data) {\n  \n  var buffer = '';\n  data.buffer.push(\"\\n    \");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"selectMenuView\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\n  data.buffer.push(\"\\n  \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div class=\\\"ember-select-container dropdown-toggle js-dropdown-toggle\\\" \");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"toggleDropdown\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n  data.buffer.push(\">\\n  <a \");\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\n    'class': (\":form-control :ember-select-choice buttonClass disabled:disabled\")\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push(\">\\n    \");\n  stack1 = helpers['if'].call(depth0, \"selection\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n  </a>\\n</div>\\n\\n<div \");\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\n    'class': (\":dropdown-menu :js-dropdown-menu dropdownMenuClass\\n  isDropdownMenuPulledRight:pull-right\")\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push(\">\\n  \");\n  stack1 = helpers.unless.call(depth0, \"isSelect\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n  \");\n  stack1 = helpers['if'].call(depth0, \"showDropdown\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n  \");\n  stack1 = helpers['if'].call(depth0, \"selectMenuView\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(12, program12, data),contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n</div>\\n\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"view-parent-view-content\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1;\n\n\n  stack1 = helpers._triageMustache.call(depth0, \"view.parentView.content\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\");\n  return buffer;\n  \n});\n\n})();//@ sourceURL=build/src/templates.js")

eval("(function() {\n\nEmber.Widgets.StyleBindingsMixin = Ember.Mixin.create({\n  concatenatedProperties: ['styleBindings'],\n  attributeBindings: ['style'],\n  unitType: 'px',\n  createStyleString: function(styleName, property) {\n    var value;\n    value = this.get(property);\n    if (value === void 0) {\n      return;\n    }\n    if (Ember.typeOf(value) === 'number') {\n      value = value + this.get('unitType');\n    }\n    return \"\" + styleName + \":\" + value + \";\";\n  },\n  applyStyleBindings: function() {\n    var lookup, properties, styleBindings, styleComputed, styles,\n      _this = this;\n    styleBindings = this.styleBindings;\n    if (!styleBindings) {\n      return;\n    }\n    lookup = {};\n    styleBindings.forEach(function(binding) {\n      var property, style, _ref;\n      _ref = binding.split(':'), property = _ref[0], style = _ref[1];\n      return lookup[style || property] = property;\n    });\n    styles = _.keys(lookup);\n    properties = _.values(lookup);\n    styleComputed = Ember.computed(function() {\n      var styleString, styleTokens;\n      styleTokens = styles.map(function(style) {\n        return _this.createStyleString(style, lookup[style]);\n      });\n      styleString = styleTokens.join('');\n      if (styleString.length !== 0) {\n        return styleString;\n      }\n    });\n    styleComputed.property.apply(styleComputed, properties);\n    return Ember.defineProperty(this, 'style', styleComputed);\n  },\n  init: function() {\n    this.applyStyleBindings();\n    return this._super();\n  }\n});\n\nEmber.Widgets.BodyEventListener = Ember.Mixin.create({\n  bodyElementSelector: 'html',\n  bodyClick: Ember.K,\n  didInsertElement: function() {\n    this._super();\n    return Ember.run.next(this, this._setupDocumentHandlers);\n  },\n  willDestroyElement: function() {\n    this._super();\n    return this._removeDocumentHandlers();\n  },\n  _setupDocumentHandlers: function() {\n    var _this = this;\n    if (this._clickHandler || this.isDestroying) {\n      return;\n    }\n    this._clickHandler = function(event) {\n      return Ember.run(function() {\n        if ((_this.get('_state') || _this.get('state')) === 'inDOM' && Ember.isEmpty(_this.$().has($(event.target)))) {\n          return _this.bodyClick();\n        }\n      });\n    };\n    return $(this.get('bodyElementSelector')).on(\"click\", this._clickHandler);\n  },\n  _removeDocumentHandlers: function() {\n    $(this.get('bodyElementSelector')).off(\"click\", this._clickHandler);\n    return this._clickHandler = null;\n  }\n});\n\n\n})();//@ sourceURL=build/src/mixins.js")

eval("(function() {\n\nEmber.Widgets.SelectOptionView = Ember.ListItemView.extend({\n  tagName: 'li',\n  templateName: 'select-item',\n  layoutName: 'select-item-layout',\n  classNames: 'ember-select-result-item',\n  classNameBindings: Ember.A(['content.isGroupOption:ember-select-group', 'isHighlighted:highlighted']),\n  labelPath: Ember.computed.alias('controller.optionLabelPath'),\n  isHighlighted: Ember.computed(function() {\n    return this.get('controller.highlighted') === this.get('content');\n  }).property('controller.highlighted', 'content'),\n  labelPathDidChange: Ember.observer(function() {\n    var labelPath, path;\n    labelPath = this.get('labelPath');\n    path = labelPath ? \"content.\" + labelPath : 'content';\n    Ember.defineProperty(this, 'label', Ember.computed.alias(path));\n    return this.notifyPropertyChange('label');\n  }, 'content', 'labelPath'),\n  didInsertElement: function() {\n    this._super();\n    return this.labelPathDidChange();\n  },\n  updateContext: function(context) {\n    this._super(context);\n    return this.set('content', context);\n  },\n  click: function() {\n    if (this.get('content.isGroupOption')) {\n      return;\n    }\n    this.set('controller.selection', this.get('content'));\n    this.get('controller').userDidSelect(this.get('content'));\n    if (this.get('controller.showDropdown')) {\n      this.get('controller').send('hideDropdown');\n      return false;\n    }\n  },\n  mouseEnter: function() {\n    if (this.get('content.isGroupOption')) {\n      return;\n    }\n    return this.set('controller.highlighted', this.get('content'));\n  }\n});\n\nEmber.Widgets.SelectComponent = Ember.Component.extend(Ember.Widgets.BodyEventListener, Ember.AddeparMixins.ResizeHandlerMixin, {\n  layoutName: 'select',\n  classNames: 'ember-select',\n  attributeBindings: Ember.A(['tabindex']),\n  classNameBindings: Ember.A(['showDropdown:open', 'isDropup:dropup']),\n  itemViewClass: 'Ember.Widgets.SelectOptionView',\n  prompt: 'Select a Value',\n  placeholder: void 0,\n  disabled: false,\n  highlightedIndex: -1,\n  tabindex: -1,\n  showDropdown: false,\n  dropdownHeight: 300,\n  rowHeight: 26,\n  sortLabels: true,\n  titleOnOptions: false,\n  isSelect: false,\n  isDropup: false,\n  isDropdownMenuPulledRight: false,\n  dropdownToggleIcon: 'fa fa-caret-down',\n  buttonClass: 'btn btn-default',\n  dropdownMenuClass: '',\n  content: Ember.A([]),\n  selection: null,\n  query: '',\n  optionLabelPath: '',\n  optionValuePath: '',\n  optionGroupPath: '',\n  optionDefaultPath: '',\n  selectMenuView: null,\n  willDestroy: function() {\n    var contentProxy, propertyName;\n    propertyName = 'contentProxy';\n    if (this.cacheFor(propertyName)) {\n      contentProxy = this.get(propertyName);\n      contentProxy.destroy();\n    }\n    return this._super();\n  },\n  updateDropdownLayout: Ember.observer(function() {\n    var dropdownButton, dropdownButtonHeight, dropdownButtonOffset, dropdownMargin, dropdownMenu, dropdownMenuBottom, dropdownMenuHeight, dropdownMenuOffset, dropdownMenuWidth, dropupMenuTop;\n    if ((this.get('_state') || this.get('state')) !== 'inDOM' || this.get('showDropdown') === false) {\n      return;\n    }\n    this.$('.js-dropdown-menu').css('visibility', 'hidden');\n    dropdownButton = this.$('.js-dropdown-toggle')[0];\n    dropdownButtonHeight = this.$(dropdownButton).outerHeight();\n    dropdownButtonOffset = this.$(dropdownButton).offset();\n    dropdownMenu = this.$('.js-dropdown-menu')[0];\n    dropdownMenuHeight = this.$(dropdownMenu).outerHeight();\n    dropdownMenuWidth = this.$(dropdownMenu).outerWidth();\n    dropdownMenuOffset = this.$(dropdownMenu).offset();\n    dropdownMargin = 15;\n    if (this.get('isDropup')) {\n      dropdownMenuBottom = dropdownButtonOffset.top + dropdownButtonHeight + dropdownMenuHeight + dropdownMargin;\n    } else {\n      dropdownMenuBottom = dropdownMenuOffset.top + dropdownMenuHeight;\n    }\n    dropupMenuTop = dropdownButtonOffset.top - dropdownMenuHeight - dropdownMargin;\n    this.set('isDropup', dropupMenuTop > window.scrollY && dropdownMenuBottom > window.innerHeight);\n    this.set('isDropdownMenuPulledRight', dropdownButtonOffset.left + dropdownMenuWidth + dropdownMargin > window.innerWidth);\n    return this.$('.js-dropdown-menu').css('visibility', 'visible');\n  }, 'showDropdown'),\n  onResizeEnd: function() {\n    return Ember.run(this, this.updateDropdownLayout);\n  },\n  itemView: Ember.computed(function() {\n    var itemViewClass;\n    itemViewClass = this.get('itemViewClass');\n    if (typeof itemViewClass === 'string') {\n      return Ember.get(itemViewClass);\n    }\n    return itemViewClass;\n  }).property('itemViewClass'),\n  selectedItemView: Ember.computed(function() {\n    return this.get('itemView').extend({\n      tagName: 'span',\n      labelPath: Ember.computed.alias('controller.optionLabelPath'),\n      context: Ember.computed.alias('controller.selection')\n    });\n  }).property('itemView'),\n  selectedLabel: Ember.computed(function() {\n    return Ember.get(this.get('selection'), this.get('optionLabelPath'));\n  }).property('selection', 'optionLabelPath'),\n  searchView: Ember.TextField.extend({\n    placeholder: Ember.computed.alias('parentView.placeholder'),\n    valueBinding: 'parentView.query',\n    showDropdownDidChange: Ember.observer(function() {\n      if (this.get('parentView.showDropdown')) {\n        return Ember.run.schedule('afterRender', this, function() {\n          if ((this.get('_state') || this.get('state')) === 'inDOM') {\n            return this.$().focus();\n          }\n        });\n      }\n    }, 'parentView.showDropdown')\n  }),\n  listView: Ember.ListView.extend({\n    style: Ember.computed(function() {\n      var height;\n      height = Math.min(this.get('height'), this.get('totalHeight'));\n      return \"height: \" + height + \"px\";\n    }).property('height', 'totalHeight')\n  }),\n  preparedContent: Ember.computed(function() {\n    if (this.get('sortLabels')) {\n      return this.get('sortedFilteredContent');\n    } else {\n      return this.get('filteredContent');\n    }\n  }).property('sortLabels', 'filteredContent.[]', 'sortedFilteredContent.[]', 'filteredContent', 'sortedFilteredContent'),\n  contentProxy: Ember.computed(function() {\n    var ContentProxy, observableString, optionLabelPath;\n    optionLabelPath = this.get('optionLabelPath');\n    if (optionLabelPath) {\n      observableString = \"content.@each.\" + optionLabelPath;\n    } else {\n      observableString = 'content.@each';\n    }\n    ContentProxy = Ember.ObjectProxy.extend({\n      _select: null,\n      content: Ember.computed.alias('_select.content'),\n      query: Ember.computed.alias('_select.query'),\n      filteredContent: Ember.computed(function() {\n        var query, selectComponent;\n        selectComponent = this.get('_select');\n        query = this.get('query');\n        return (this.get('content') || []).filter(function(item) {\n          return selectComponent.matcher(query, item);\n        });\n      }).property(observableString, 'query'),\n      sortedFilteredContent: Ember.computed(function() {\n        var _this = this;\n        return _.sortBy(this.get('filteredContent'), function(item) {\n          var _ref;\n          return (_ref = Ember.get(item, optionLabelPath)) != null ? _ref.toLowerCase() : void 0;\n        });\n      }).property('filteredContent.[]')\n    });\n    return ContentProxy.create({\n      _select: this\n    });\n  }).property('optionLabelPath'),\n  filteredContent: Ember.computed.alias('contentProxy.filteredContent'),\n  sortedFilteredContent: Ember.computed.alias('contentProxy.sortedFilteredContent'),\n  groupedContent: Ember.computed(function() {\n    var content, groups, path, result;\n    path = this.get('optionGroupPath');\n    content = this.get('preparedContent');\n    if (!path) {\n      return Ember.A(content);\n    }\n    groups = _.groupBy(content, function(item) {\n      return Ember.get(item, path);\n    });\n    result = Ember.A();\n    _.keys(groups).sort().forEach(function(key) {\n      result.pushObject(Ember.Object.create({\n        isGroupOption: true,\n        name: key\n      }));\n      return result.pushObjects(groups[key]);\n    });\n    return result;\n  }).property('preparedContent.[]', 'optionGroupPath', 'labels.[]'),\n  isLoading: false,\n  isLoaded: Ember.computed.not('isLoading'),\n  filteredContentIsEmpty: Ember.computed.empty('filteredContent'),\n  hasNoResults: Ember.computed.and('isLoaded', 'filteredContentIsEmpty'),\n  value: Ember.computed(function(key, value) {\n    var selection, valuePath;\n    if (arguments.length === 2) {\n      valuePath = this.get('optionValuePath');\n      selection = value;\n      if (valuePath && this.get('content')) {\n        selection = this.get('content').findProperty(valuePath, value);\n      }\n      this.set('selection', selection);\n      return value;\n    } else {\n      valuePath = this.get('optionValuePath');\n      selection = this.get('selection');\n      if (valuePath) {\n        return Ember.get(selection, valuePath);\n      } else {\n        return selection;\n      }\n    }\n  }).property('selection'),\n  didInsertElement: function() {\n    this._super();\n    return this.setDefaultSelection();\n  },\n  matcher: function(searchText, item) {\n    var escapedSearchText, label, regex;\n    if (!searchText) {\n      return true;\n    }\n    label = Ember.get(item, this.get('optionLabelPath'));\n    escapedSearchText = searchText.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n    regex = new RegExp(escapedSearchText, 'i');\n    return regex.test(label);\n  },\n  setDefaultSelection: Ember.observer(function() {\n    var content, defaultPath;\n    if (this.get('selection')) {\n      return;\n    }\n    content = this.get('content');\n    defaultPath = this.get('optionDefaultPath');\n    if (!(content && defaultPath)) {\n      return;\n    }\n    return this.set('selection', content.findProperty(defaultPath));\n  }, 'content.[]'),\n  selectableOptionsDidChange: Ember.observer(function() {\n    var highlighted;\n    if (this.get('showDropdown')) {\n      highlighted = this.get('highlighted');\n      if (!this.get('selectableOptions').contains(highlighted)) {\n        return this.set('highlighted', this.get('selectableOptions.firstObject'));\n      }\n    }\n  }, 'selectableOptions.[]', 'showDropdown'),\n  /*\n  # SELECTION RELATED\n  */\n\n  KEY_EVENTS: {\n    8: 'deletePressed',\n    27: 'escapePressed',\n    13: 'enterPressed',\n    38: 'upArrowPressed',\n    40: 'downArrowPressed'\n  },\n  selectableOptions: Ember.computed(function() {\n    return Ember.A((this.get('groupedContent') || []).filter(function(item) {\n      return !Ember.get(item, 'isGroupOption');\n    }));\n  }).property('groupedContent.[]'),\n  highlighted: Ember.computed(function(key, value) {\n    var content, index;\n    content = this.get('selectableOptions') || Ember.A([]);\n    value = value || Ember.A([]);\n    if (arguments.length === 1) {\n      index = this.get('highlightedIndex');\n      value = content.objectAt(index);\n    } else {\n      index = content.indexOf(value);\n      this.setHighlightedIndex(index, true);\n    }\n    return value;\n  }).property('selectableOptions.[]', 'highlightedIndex'),\n  bodyClick: function() {\n    return this.send('hideDropdown');\n  },\n  keyDown: function(event) {\n    var map, method, _ref;\n    if (!this.get('showDropdown')) {\n      return this.set('showDropdown', true);\n    }\n    map = this.get('KEY_EVENTS');\n    method = map[event.keyCode];\n    if (method) {\n      return (_ref = this.get(method)) != null ? _ref.apply(this, arguments) : void 0;\n    }\n  },\n  deletePressed: Ember.K,\n  escapePressed: function(event) {\n    return this.send('hideDropdown');\n  },\n  enterPressed: function(event) {\n    var item;\n    item = this.get('highlighted');\n    if (!Ember.isEmpty(item)) {\n      this.set('selection', item);\n    }\n    if (!Ember.isEmpty(item)) {\n      this.userDidSelect(item);\n    }\n    this.send('hideDropdown');\n    return event.preventDefault();\n  },\n  upArrowPressed: function(event) {\n    var index, sel;\n    sel = this.get('highlightedIndex');\n    index = event.ctrlKey || event.metaKey ? 0 : sel - 1;\n    this.setHighlightedIndex(index, true);\n    return event.preventDefault();\n  },\n  downArrowPressed: function(event) {\n    var clen, index, sel;\n    sel = this.get('highlightedIndex');\n    clen = this.get('selectableOptions.length');\n    index = event.ctrlKey || event.metaKey ? clen - 1 : sel + 1;\n    this.setHighlightedIndex(index, true);\n    return event.preventDefault();\n  },\n  setHighlightedIndex: function(index, ensureVisible) {\n    if (!this.ensureIndex(index)) {\n      return;\n    }\n    this.set('highlightedIndex', index);\n    if (ensureVisible) {\n      return this.ensureVisible(index);\n    }\n  },\n  ensureIndex: function(index) {\n    var clen;\n    clen = this.get('selectableOptions.length');\n    return index >= 0 && index < clen;\n  },\n  ensureVisible: function(index) {\n    var $listView, endIndex, item, listView, newIndex, numRows, startIndex;\n    $listView = this.$('.ember-list-view');\n    listView = Ember.View.views[$listView.attr('id')];\n    if (!listView) {\n      return;\n    }\n    startIndex = listView._startingIndex();\n    numRows = listView._childViewCount() - 1;\n    endIndex = startIndex + numRows;\n    item = this.get('selectableOptions').objectAt(index);\n    newIndex = this.get('groupedContent').indexOf(item);\n    if (index === 0) {\n      return $listView.scrollTop(0);\n    } else if (newIndex < startIndex) {\n      return $listView.scrollTop(newIndex * this.get('rowHeight'));\n    } else if (newIndex >= endIndex) {\n      return $listView.scrollTop((newIndex - numRows + 1.5) * this.get('rowHeight'));\n    }\n  },\n  userDidSelect: function(selection) {\n    return this.sendAction('userSelected', selection);\n  },\n  actions: {\n    toggleDropdown: function(event) {\n      if (this.get('disabled')) {\n        return;\n      }\n      return this.toggleProperty('showDropdown');\n    },\n    hideDropdown: function(event) {\n      if (this.get('isDestroyed') || this.get('isDestroying')) {\n        return;\n      }\n      return this.set('showDropdown', false);\n    }\n  }\n});\n\nEmber.Handlebars.helper('select-component', Ember.Widgets.SelectComponent);\n\n\n})();//@ sourceURL=build/src/select.js")

eval("(function() {\n\nEmber.Widgets.MultiSelectOptionView = Ember.View.extend({\n  tagName: 'li',\n  templateName: 'multi-select-item',\n  classNames: 'ember-select-search-choice',\n  labelPath: Ember.computed.alias('controller.optionLabelPath'),\n  didInsertElement: function() {\n    this._super();\n    return this.labelPathDidChange();\n  },\n  labelPathDidChange: Ember.observer(function() {\n    var labelPath, path;\n    labelPath = this.get('labelPath');\n    path = labelPath ? \"context.\" + labelPath : 'context';\n    Ember.defineProperty(this, 'label', Ember.computed.alias(path));\n    return this.notifyPropertyChange('label');\n  }, 'context', 'labelPath')\n});\n\nEmber.Widgets.MultiSelectComponent = Ember.Widgets.SelectComponent.extend({\n  layoutName: 'multi-select',\n  selections: void 0,\n  choicesFieldClass: '',\n  placeholder: void 0,\n  persistentPlaceholder: void 0,\n  values: Ember.computed(function(key, value) {\n    var selections, valuePath;\n    if (arguments.length === 2) {\n      if (!value) {\n        return;\n      }\n      valuePath = this.get('optionValuePath');\n      this.set('selections', Ember.A(this.get('content').filter(function(item) {\n        return value.contains(Ember.get(item, valuePath));\n      })));\n      return value;\n    } else {\n      valuePath = this.get('optionValuePath');\n      selections = this.get('selections');\n      if (valuePath) {\n        return selections.getEach(valuePath);\n      } else {\n        return selections;\n      }\n    }\n  }).property('selections.[]'),\n  selectionItemView: Ember.Widgets.MultiSelectOptionView,\n  invisiblePlaceholderText: Ember.computed(function() {\n    if (this.get('query')) {\n      return this.get('query');\n    }\n    if (this.get('selections.length')) {\n      return this.get('persistentPlaceholder');\n    }\n    return this.get('placeholder') || this.get('persistentPlaceholder');\n  }).property('query', 'placeholder', 'persistentPlaceholder', 'selections.length'),\n  searchView: Ember.TextField.extend({\n    \"class\": 'ember-select-input',\n    valueBinding: 'parentView.query',\n    focusIn: function(event) {\n      return this.set('parentView.showDropdown', true);\n    },\n    placeholder: Ember.computed(function() {\n      if (this.get('parentView.selections.length')) {\n        return this.get('parentView.persistentPlaceholder');\n      }\n      return this.get('parentView.placeholder') || this.get('parentView.persistentPlaceholder');\n    }).property('parentView.placeholder', 'parentView.persistentPlaceholder', 'parentView.selections.length')\n  }),\n  preparedContent: Ember.computed(function() {\n    var content, selections;\n    content = this.get('content');\n    selections = this.get('selections');\n    if (!(content && selections)) {\n      return Ember.A([]);\n    }\n    if (this.get('sortLabels')) {\n      return this.get('sortedFilteredContent').filter(function(item) {\n        return !selections.contains(item);\n      });\n    } else {\n      return this.get('filteredContent').filter(function(item) {\n        return !selections.contains(item);\n      });\n    }\n  }).property('content.[]', 'filteredContent.[]', 'sortedFilteredContent.[]', 'selections.[]', 'sortLabels', 'filteredContent', 'sortedFilteredContent'),\n  selectionDidChange: Ember.observer(function() {\n    var selection, selections;\n    selections = this.get('selections');\n    selection = this.get('selection');\n    this.set('selection', null);\n    this.set('query', '');\n    if (!Ember.isEmpty(selection) && !selections.contains(selection)) {\n      return selections.pushObject(selection);\n    }\n  }, 'selection', 'selections.[]'),\n  didInsertElement: function() {\n    this._super();\n    if (!this.get('selections')) {\n      this.set('selections', Ember.A([]));\n    }\n    if (!this.get('values')) {\n      return this.set('values', Ember.A([]));\n    }\n  },\n  deletePressed: function(event) {\n    if (event.target.selectionStart === 0) {\n      return this.removeSelectItem(this.get('selections.lastObject'));\n    }\n  },\n  removeSelectItem: function(item) {\n    return this.get('selections').removeObject(item);\n  },\n  actions: {\n    removeSelectItem: function(item) {\n      return this.removeSelectItem(item);\n    }\n  }\n});\n\nEmber.Handlebars.helper('multi-select-component', Ember.Widgets.MultiSelectComponent);\n\n\n})();//@ sourceURL=build/src/multi_select.js")